extends layout

block content
  div
    p Move pieces with the arrow keys. Rotate with Z and X. Pause with the P key.
  div(id='status')
  div(id='game_row')
    div(class='game_container main_container container')
      canvas(id='gtx', width='350', height='630')
    div(class='info_container container')
      div(class='info_panel')
        p Score:
        p(id='score', class='right-align')
      div(class='info_panel')
        p Level:
        p(id='level', class='right-align')
      div(class='info_panel')
        p Lines:
        p(id='lines_cleared', class='right-align')
      div(class='game_container preview_container')
        canvas(id='preview_gtx', width='140', height='140')
    div(class='text_container container')
      div
        p Polytris is a version of Tetris that has polyominoes made of n sized blocks.
      div(class='emphasis')
        p
          a(href='preview.html') View all pieces
          | &nbsp;
          a(href='highscores.html') View high scores
      div(id='game_links')
  script(src='/js/utilities.js')
  script(src='/js/poly.js')
  script(src='/js/pieceGenerator.js')
  script(src='/js/game.js')
  script.
    var links = 'Poly size: ';
    for (var i = 1; i < 10; i++) {
      links += `<a href='${window.location.pathname}?polySize=${i}'>${i}</a>`
    }
    $('#game_links').html(links);

    var polySize = 4;
    var polySizeQuery = getQueryParam('polySize');
    var polySize = parseInt(polySizeQuery, 10);
    if (isNaN(polySize)) {
      polySize = 4;
    }

    var pieces = new PieceGenerator().createPolyominoes(polySize);

    var game = new PolytrisGame(10, 18, pieces);
    game.startGame();

    function resize() {
      var currentCanvasHeight = $('#game_row').height();

      var blockLength = currentCanvasHeight / game.gridHeight;

      var gameHeight = blockLength * game.gridHeight;
      var gameWidth = blockLength * game.gridWidth;

      console.log(`width: ${gameWidth} - height: ${gameHeight}`);
      $('#gtx').attr('height', gameHeight);
      $('#gtx').attr('width', gameWidth);
      game.rebuildGtx();
    };
    window.onresize = resize;
    resize();

    window.onkeydown = function (e) {
      var key = e.keyCode ? e.keyCode : e.which;

      var xMod = 0;
      var yMod = 0;

      if (!game.paused && !game.gameOver && game.removingLinesFrames == 0) {
        // up or space
        if (key == 38 || key == 32) {
          game.dropPiece();
        }
        // down
        else if (key == 40) {
          yMod++;
        }
        // left
        else if (key == 37) {
          xMod--;
        }
        // right
        else if (key == 39) {
          xMod++;
        }
        // X
        else if (key == 88) {
          game.rotateCurrentPieceClockwise();
        }
        // Z
        else if (key == 90) {
          game.rotateCurrentPieceAntiClockwise();
        }
      }
      // P
      if (key == 80) {
        game.paused = !game.paused;
      }
      if (xMod != 0 || yMod != 0) {
        game.moveCurrentPiece(xMod, yMod);
      }
    }
